{
  "src/ts/components/KPIWidget/KPIWidget.tsx": {
    "displayName": "KPIWidget",
    "description": "",
    "props": {
      "name": {
        "description": "KPI name (required)",
        "required": true,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "units": {
        "description": "Units, used to measure KPI, e.g. 'USD', 'hrs.', etc.\n@,default,''",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "mode": {
        "description": "Widget mode (default, compact)\n@,default,'default'",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'compact'",
              "computed": false
            }
          ],
          "raw": "EWidgetMode"
        }
      },
      "value": {
        "description": "Current KPI value (in the current reporting period) (required)",
        "required": true,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "preValue": {
        "description": "Previous KPI value, to compare with (value from the previous reporting period). Used to calculate the difference and define the COLOR of the KPI\n@,default,undefined",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "baseline": {
        "description": "Baseline (starting value, to measure progress from base -> target) value\n@,default,0",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "valueMin": {
        "description": "Minimum value of KPI (used to calculate Performace type of target difference)\n@,default,0",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "valueMax": {
        "description": "Maximum value of KPI (used to calculate Performace type of target difference)\n@,default,0",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "userDiffValue": {
        "description": "set the number if you want to use custom difference method on server side\n@,requires,diffType='user'",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "diffType": {
        "description": "Type of scoring the difference between current and previous value\n@,default,'default'\n@,see,EDifferenceType, ,*\n@,requires,userDiffValue",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'user'",
              "computed": false
            }
          ],
          "raw": "EDifferenceType"
        }
      },
      "targetDiffType": {
        "description": "Type of scoring the difference between current and target value\n@,default,'default'\n@,see,ETargetDifferenceType, ,*\n@,requires,target",
        "required": false,
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'user'",
              "computed": false
            },
            {
              "value": "'progress'",
              "computed": false
            },
            {
              "value": "'variance'",
              "computed": false
            },
            {
              "value": "'performance'",
              "computed": false
            }
          ],
          "raw": "ETargetDifferenceType"
        }
      },
      "target": {
        "description": "Target value\n@,default,undefined\n@,requires,targetDiffType\n@,requires,targetDiffMethod\n@,see,ETargetDifferenceType, ,*\n@,see,targetDiffMethod",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "userTargetDiffValue": {
        "description": "set the number if you want to use custom difference method on server side\n@,requires,targetDiffType='user'",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "inverted": {
        "description": "Should we invert what's godd and what's bad (going up -> bas, going down -> good)\n@,default,false",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "enabled": {
        "description": "Is KPI Wisget enabled\n@,default,true",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "showDiff": {
        "description": "Should we show difference between current and previous value\n@,default,true",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "showTarget": {
        "description": "Should we show target value\n@,default,true",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "showTargetDiff": {
        "description": "Should we show difference between current and target value\n@,default,true",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "valuePrecision": {
        "description": "Precision of value (number of digits after decimal point)\n@,default,1",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "diffPrecision": {
        "description": "Precision of difference from previous KPI value (number of digits after decimal point)\n@,default,1",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "targetPrecision": {
        "description": "Precision of target (number of digits after decimal point)\n@,default,1",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "targetDiffPrecision": {
        "description": "Precision of target difference (number of digits after decimal point)\n@,default,1",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "n_clicks": {
        "description": "An integer that represents the number of times that this element has been clicked on.\n@,default,0\n@,param,n_clicks, ,- Number of times the component has been clicked on.",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "n_clicks_timestamp": {
        "description": "An integer that represents the time (in ms since 1970) at which n_clicks changed. \r\nThis can be used to tell which button was changed most recently.\n@,default,-1 - means never clicked",
        "required": false,
        "type": {
          "name": "number",
          "raw": "number"
        }
      },
      "disable_n_clicks": {
        "description": "When True, this will disable the n_clicks prop. \r\nUse this to remove event listeners that may interfere with screen readers.",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      },
      "children": {
        "description": "",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      }
    },
    "isContext": false
  }
}